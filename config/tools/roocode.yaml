tool_name: Roocode
format: conversational
tone: expert_technical
framework: AI-assisted development
preferred_use_cases:
- web_development
- code_generation
- debugging
- testing
- api_integration
prompting_strategies:
  step_by_step:
    template: 'Step 1: {analysis} Step 2: {implementation} Step 3: {validation}'
    use_cases:
    - complex_tasks
    - debugging
    effectiveness_score: 0.9
  tool_based:
    template: Use {tool_name} to {action} for {objective}
    use_cases:
    - automated_tasks
    - integrations
    effectiveness_score: 0.85
  context_aware:
    template: 'Given context: {context}, implement {requirement} ensuring {constraints}'
    use_cases:
    - contextual_development
    - adaptive_solutions
    effectiveness_score: 0.8
development_stages:
- planning
- implementation
- testing
- deployment
supported_components:
- code
- documentation
- tests
capabilities:
- an overview of the project's file structure
- additional tools and resources
- use the list_files tool
- multiple tools with different capabilities
- open in a browser
- efficiently read specific portions of large files without loading the entire file
  into memory
- the missing parameters using the ask_followup_question tool
- multiple operations at once
- use search_files to perform regex searches across files in a specified directory
- insights into the codebase structure and important constructs
constraints:
- list the top-level contents
- handle large files
- '`cd` into a different directory to complete a task'
- end your result with questions or offers for further assistance
- be used until you've confirmed from the user that any previous tool uses were successful
- the requested lines
- when you need additional details to complete a task
- edit files matching "\
documentation_sources:
- data/roocode_docs/comprehensive_system_prompt.md
extracted_metadata:
  source: comprehensive_ai_tools_repository
  files_processed: 1
  has_tools_config: false
